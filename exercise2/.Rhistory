lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
library(tseries)
library(dplyr)
library(lubridate)
datos = read.csv("5530E.csv", header = TRUE, sep=";")
datos = datos[,c("Fecha","Tmax")]
datos$Fecha = as.Date(datos$Fecha)
apply(datos, 2, function(atributo){sum(is.na(atributo))})
datos = datos[complete.cases(datos),]
Npred = 7 # cantidad de datos a predecir (temperaturas m치ximas de marzo y abril)
serie = datos$Tmax
serie.ts = ts(serie, frequency = 365) # frequency set to 12 to set stationality each 12 months
plot(decompose(serie.ts))
serie.ts.log = log(serie.ts)
serie.log = log(serie)
plot(decompose(serie.ts.log))
head(decompose(serie.ts.log)$seasonal)
serie = serie.log
# para train
tiempo = 1:length(serie.ts.log)
# para test
tiempoTs = (tiempo[length(tiempo)]+1):(tiempo[length(tiempo)]+Npred)
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
parametros.H1 = lm(serie^2 ~tiempo)
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
parametros.H1 = lm(serie^2 ~tiempo^2)
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
parametros.H1 = lm(serie ~tiempo^2)
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
parametros.H1 = lm(serie ~log(tiempo))
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
parametros.H1 = lm(serie ~exp(tiempo))
parametros.H1 = lm(serie ~exp(tiempo))
parametros.H1 = lm(exp(serie) ~exp(tiempo))
parametros.H1 = lm(serie ~tiempo^3)
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
parametros.H1 = lm(serie2 ~tiempo + I(tiempo^2))
parametros.H1 = lm(serie ~tiempo + I(tiempo^2))
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[3]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[3]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]  + tiempo*parametros.H1$coefficients[3]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]  + tiempoTs*parametros.H1$coefficients[3]
library(tseries)
library(dplyr)
library(lubridate)
datos = read.csv("5530E.csv", header = TRUE, sep=";")
datos = datos[,c("Fecha","Tmax")]
datos$Fecha = as.Date(datos$Fecha)
apply(datos, 2, function(atributo){sum(is.na(atributo))})
datos = datos[complete.cases(datos),]
Npred = 7 # cantidad de datos a predecir (temperaturas m치ximas de marzo y abril)
serie = datos$Tmax
serie.ts = ts(serie, frequency = 365) # frequency set to 12 to set stationality each 12 months
plot(decompose(serie.ts))
serie.ts.log = log(serie.ts)
serie.log = log(serie)
plot(decompose(serie.ts.log))
head(decompose(serie.ts.log)$seasonal)
serie = serie.log
# para train
tiempo = 1:length(serie.ts.log)
# para test
tiempoTs = (tiempo[length(tiempo)]+1):(tiempo[length(tiempo)]+Npred)
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
parametros.H1 = lm(serie ~tiempo + I(tiempo^2))
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]  + tiempo*parametros.H1$coefficients[3]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]  + tiempoTs*parametros.H1$coefficients[3]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
is.na(datos$Tmax)
library(tseries)
library(dplyr)
library(lubridate)
datos = read.csv("5530E.csv", header = TRUE, sep=";")
datos = datos[,c("Fecha","Tmax")]
datos$Fecha = as.Date(datos$Fecha)
apply(datos, 2, function(atributo){sum(is.na(atributo))})
datos$Tmax[is.na(datos$Tmax)] = median(datos$Tmax)
apply(datos, 2, function(atributo){sum(is.na(atributo))})
datos$Tmax[is.na(datos$Tmax)]
median(datos$Tmax)
median(datos$Tmax, na.rm = T)
library(tseries)
library(dplyr)
library(lubridate)
datos = read.csv("5530E.csv", header = TRUE, sep=";")
datos = datos[,c("Fecha","Tmax")]
datos$Fecha = as.Date(datos$Fecha)
apply(datos, 2, function(atributo){sum(is.na(atributo))})
datos$Tmax[is.na(datos$Tmax)] = median(datos$Tmax, na.rm = T)
Npred = 7 # cantidad de datos a predecir (temperaturas m치ximas de marzo y abril)
serie = datos$Tmax
serie.ts = ts(serie, frequency = 365) # frequency set to 12 to set stationality each 12 months
plot(decompose(serie.ts))
serie.ts.log = log(serie.ts)
serie.log = log(serie)
plot(decompose(serie.ts.log))
head(decompose(serie.ts.log)$seasonal)
serie = serie.log
# para train
tiempo = 1:length(serie.ts.log)
# para test
tiempoTs = (tiempo[length(tiempo)]+1):(tiempo[length(tiempo)]+Npred)
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
parametros.H1 = lm(serie ~tiempo + I(tiempo^2))
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]  + tiempo*parametros.H1$coefficients[3]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]  + tiempoTs*parametros.H1$coefficients[3]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
library(tseries)
library(dplyr)
library(lubridate)
datos = read.csv("5530E.csv", header = TRUE, sep=";")
datos = datos[,c("Fecha","Tmax")]
datos$Fecha = as.Date(datos$Fecha)
apply(datos, 2, function(atributo){sum(is.na(atributo))})
datos$Tmax[is.na(datos$Tmax)] = median(datos$Tmax, na.rm = T)
Npred = 7 # cantidad de datos a predecir (temperaturas m치ximas de marzo y abril)
serie = datos$Tmax
serie.ts = ts(serie, frequency = 365) # frequency set to 12 to set stationality each 12 months
plot(decompose(serie.ts))
serie.ts.log = log(serie.ts)
serie.log = log(serie)
plot(decompose(serie.ts.log))
head(decompose(serie.ts.log)$seasonal)
serie = serie.log
# para train
tiempo = 1:length(serie.ts.log)
# para test
tiempoTs = (tiempo[length(tiempo)]+1):(tiempo[length(tiempo)]+Npred)
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
parametros.H1 = lm(serie ~tiempo)
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
library(tseries)
library(dplyr)
library(lubridate)
datos = read.csv("5530E.csv", header = TRUE, sep=";")
datos = datos[,c("Fecha","Tmax")]
datos$Fecha = as.Date(datos$Fecha)
apply(datos, 2, function(atributo){sum(is.na(atributo))})
datos$Tmax[is.na(datos$Tmax)] = median(datos$Tmax, na.rm = T)
Npred = 7 # cantidad de datos a predecir (temperaturas m치ximas de marzo y abril)
serie = datos$Tmax
serie.ts = ts(serie, frequency = 365) # frequency set to 12 to set stationality each 12 months
plot(decompose(serie.ts))
serie.ts.log = log(serie.ts)
serie.log = log(serie)
plot(decompose(serie.ts.log))
head(decompose(serie.ts.log)$seasonal)
serie = serie.log
# para train
tiempo = 1:length(serie.ts.log)
# para test
tiempoTs = (tiempo[length(tiempo)]+1):(tiempo[length(tiempo)]+Npred)
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
parametros.H1 = lm(serie ~tiempo)
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
library(tseries)
library(dplyr)
library(lubridate)
datos = read.csv("5530E.csv", header = TRUE, sep=";")
datos = datos[,c("Fecha","Tmax")]
datos$Fecha = as.Date(datos$Fecha)
apply(datos, 2, function(atributo){sum(is.na(atributo))})
datos$Tmax[is.na(datos$Tmax)] = median(datos$Tmax, na.rm = T)
Npred = 7 # cantidad de datos a predecir (temperaturas m치ximas de marzo y abril)
serie = datos$Tmax
serie.ts = ts(serie, frequency = 365) # frequency set to 12 to set stationality each 12 months
plot(decompose(serie.ts))
serie.ts.log = log(serie.ts)
serie.log = log(serie)
plot(decompose(serie.ts.log))
head(decompose(serie.ts.log)$seasonal)
serie = serie.log
# para train
tiempo = 1:length(serie.ts.log)
# para test
tiempoTs = (tiempo[length(tiempo)]+1):(tiempo[length(tiempo)]+Npred)
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
parametros.H1 = lm(serie ~tiempo)
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
# calculo de par치metros
parametros.H1 = lm(serie ~tiempo + I(tiempo^2))
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]  + tiempo*parametros.H1$coefficients[3]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]  + tiempoTs*parametros.H1$coefficients[3]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
parametros.H1 = lm(serie ~sin(tiempo))
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
parametros.H1 = lm(log(serie) ~sin(tiempo))
parametros.H1
parametros.H1 = lm(exp(serie) ~sin(tiempo))
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
parametros.H1 = lm(serie ~log(tiempo))
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
library(tseries)
library(dplyr)
library(lubridate)
datos = read.csv("5530E.csv", header = TRUE, sep=";")
datos = datos[,c("Fecha","Tmax")]
datos$Fecha = as.Date(datos$Fecha)
apply(datos, 2, function(atributo){sum(is.na(atributo))})
datos$Tmax[is.na(datos$Tmax)] = median(datos$Tmax, na.rm = T)
Npred = 7 # cantidad de datos a predecir (temperaturas m치ximas de marzo y abril)
serie = datos$Tmax
serie.ts = ts(serie, frequency = 365) # frequency set to 12 to set stationality each 12 months
plot(decompose(serie.ts))
serie.ts.log = log(serie.ts)
serie.log = log(serie)
plot(decompose(serie.ts.log))
head(decompose(serie.ts.log)$seasonal)
serie = serie.log
# para train
tiempo = 1:length(serie.ts.log)
# para test
tiempoTs = (tiempo[length(tiempo)]+1):(tiempo[length(tiempo)]+Npred)
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
parametros.H1 = lm(serie ~tiempo)
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
# calculo de par치metros
parametros.H1 = lm(serie ~tiempo + I(tiempo^2))
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]  + tiempo*parametros.H1$coefficients[3]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]  + tiempoTs*parametros.H1$coefficients[3]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
serie = diff(serie)
# calculo de parametros
parametros.H1 = lm(serie ~tiempo)
library(tseries)
library(dplyr)
library(lubridate)
datos = read.csv("5530E.csv", header = TRUE, sep=";")
datos = datos[,c("Fecha","Tmax")]
datos$Fecha = as.Date(datos$Fecha)
apply(datos, 2, function(atributo){sum(is.na(atributo))})
datos$Tmax[is.na(datos$Tmax)] = median(datos$Tmax, na.rm = T)
Npred = 7 # cantidad de datos a predecir (temperaturas m치ximas de marzo y abril)
serie = datos$Tmax
serie.ts = ts(serie, frequency = 365) # frequency set to 12 to set stationality each 12 months
plot(decompose(serie.ts))
serie.ts.log = log(serie.ts)
serie.log = log(serie)
plot(decompose(serie.ts.log))
head(decompose(serie.ts.log)$seasonal)
serie = serie.log
# para train
tiempo = 1:length(serie.ts.log)
# para test
tiempoTs = (tiempo[length(tiempo)]+1):(tiempo[length(tiempo)]+Npred)
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
parametros.H1 = lm(serie ~tiempo)
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
# calculo de par치metros
parametros.H1 = lm(serie ~tiempo + I(tiempo^2))
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]  + tiempo*parametros.H1$coefficients[3]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]  + tiempoTs*parametros.H1$coefficients[3]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
serie = diff(serie)
# calculo de parametros
parametros.H1 = lm(serie ~tiempo)
?diff
library(tseries)
library(dplyr)
library(lubridate)
datos = read.csv("5530E.csv", header = TRUE, sep=";")
datos = datos[,c("Fecha","Tmax")]
datos$Fecha = as.Date(datos$Fecha)
apply(datos, 2, function(atributo){sum(is.na(atributo))})
datos$Tmax[is.na(datos$Tmax)] = median(datos$Tmax, na.rm = T)
Npred = 7 # cantidad de datos a predecir (temperaturas m치ximas de marzo y abril)
serie = datos$Tmax
serie.ts = ts(serie, frequency = 365) # frequency set to 12 to set stationality each 12 months
plot(decompose(serie.ts))
serie.ts.log = log(serie.ts)
serie.log = log(serie)
plot(decompose(serie.ts.log))
head(decompose(serie.ts.log)$seasonal)
serie = serie.log
# para train
tiempo = 1:length(serie.ts.log)
# para test
tiempoTs = (tiempo[length(tiempo)]+1):(tiempo[length(tiempo)]+Npred)
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
parametros.H1 = lm(serie ~tiempo)
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
# calculo de par치metros
parametros.H1 = lm(serie ~tiempo + I(tiempo^2))
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]  + tiempo*parametros.H1$coefficients[3]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]  + tiempoTs*parametros.H1$coefficients[3]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
# calculo de parametros
parametros.H1 = lm(serie ~tiempo)
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
# representacion de la tendencia sobre la serie
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
# test de normalizacion Jarque Bera
JB = jarque.bera.test(parametros.H1$residuals)
JB
# calculo de parametros
parametros.H1 = lm(diff(serie) ~tiempo)
# calculo de parametros
parametros.H1 = lm(diff(serie) ~diff(tiempo))
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
# representacion de la tendencia sobre la serie
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
# test de normalizacion Jarque Bera
JB = jarque.bera.test(parametros.H1$residuals)
JB
# calculo de parametros
parametros.H1 = lm(serie ~diff(tiempo))
# calculo de parametros
parametros.H1 = lm(diff(serie) ~1:length(diff(serie)))
# calculo de parametros
parametros.H1 = lm(diff(serie) ~length(diff(serie)))
# calculo de parametros
parametros.H1 = lm(diff(serie) ~(1:length(diff(serie))))
