# representacion de la tendencia sobre la serie
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
# test de normalizacion Jarque Bera
JB = jarque.bera.test(parametros.H1$residuals)
JB
# calculo de parametros
parametros.H1 = lm(serie ~ sin(tiempo))
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
# representacion de la tendencia sobre la serie
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
# test de normalizacion Jarque Bera
JB = jarque.bera.test(parametros.H1$residuals)
JB
serie2=diff(serie, differences = 3)
tiempo2= 1:length(serie2)
# calculo de parametros
parametros.H1 = lm(serie2 ~ tiempo2)
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo2*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
# representacion de la tendencia sobre la serie
plot.ts(serie2, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo2, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
# test de normalizacion Jarque Bera
JB = jarque.bera.test(parametros.H1$residuals)
JB
k = 365 # aquí guardamos los datos estacionales
estacionalidad = decompose(serie.ts.log)$seasonal[1:k]
# elminamos la estacionalidad
serie.sinEst = serie - estacionalidad
plot.ts(serie.sinEst, xlim=c(1, tiempoTs[length(tiempoTs)]))
acf(serie.sinEst)
adf.test(serie.sinEst)
pacf(serie.sinEst)
# coeficiente de autoregresión = 0, diferenciaciones = 0, coeficiente de medias moviles = 0
modelo = arima(serie.sinEst, order = c(0,0,5))
# calculamos las predicciones
predicciones = predict(modelo, n.ahead = Npred)
valoresPredichos = predicciones$pred
valoresPredichos
plot.ts(serie.sinEst, xlim=c(1500, tiempoTs[length(tiempoTs)]))
lines(tiempoTs,valoresPredichos, col="green")
Box.test(modelo$residuals)
jarque.bera.test(modelo$residuals)
shapiro.test(modelo$residuals)
library(tseries)
library(dplyr)
library(lubridate)
library(imputeTS)
datos = read.csv("5530E.csv", header = TRUE, sep=";")
datos = datos[,c("Fecha","Tmax")]
datos$Fecha = as.Date(datos$Fecha)
apply(datos, 2, function(atributo){sum(is.na(atributo))})
datos$Tmax = na.interpolation(datos$Tmax)
Npred = 7 # cantidad de datos a predecir (temperaturas máximas de marzo y abril)
serie = datos$Tmax
serie.ts = ts(serie, frequency = 365) # frequency set to 12 to set stationality each 12 months
plot(decompose(serie.ts))
serie.ts.log = log(serie.ts)
serie.log = log(serie)
plot(decompose(serie.ts.log))
head(decompose(serie.ts.log)$seasonal)
serie = serie.log
# para train
tiempo = 1:length(serie.ts.log)
# para test
tiempoTs = (tiempo[length(tiempo)]+1):(tiempo[length(tiempo)]+Npred)
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
parametros.H1 = lm(serie ~tiempo)
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
# calculo de parámetros
parametros.H1 = lm(serie ~tiempo + I(tiempo^2))
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]  + tiempo*parametros.H1$coefficients[3]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]  + tiempoTs*parametros.H1$coefficients[3]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
# calculo de parametros
parametros.H1 = lm(serie ~ log(tiempo))
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
# representacion de la tendencia sobre la serie
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
# test de normalizacion Jarque Bera
JB = jarque.bera.test(parametros.H1$residuals)
JB
# calculo de parametros
parametros.H1 = lm(serie ~ sin(tiempo))
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
# representacion de la tendencia sobre la serie
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
# test de normalizacion Jarque Bera
JB = jarque.bera.test(parametros.H1$residuals)
JB
serie2=diff(serie, differences = 3)
tiempo2= 1:length(serie2)
# calculo de parametros
parametros.H1 = lm(serie2 ~ tiempo2)
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo2*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
# representacion de la tendencia sobre la serie
plot.ts(serie2, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo2, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
# test de normalizacion Jarque Bera
JB = jarque.bera.test(parametros.H1$residuals)
JB
k = 365 # aquí guardamos los datos estacionales
estacionalidad = decompose(serie.ts.log)$seasonal[1:k]
# elminamos la estacionalidad
serie.sinEst = serie - estacionalidad
plot.ts(serie.sinEst, xlim=c(1, tiempoTs[length(tiempoTs)]))
acf(serie.sinEst)
adf.test(serie.sinEst)
pacf(serie.sinEst)
# coeficiente de autoregresión = 0, diferenciaciones = 0, coeficiente de medias moviles = 0
modelo = arima(serie.sinEst, order = c(0,0,22))
# calculamos las predicciones
predicciones = predict(modelo, n.ahead = Npred)
valoresPredichos = predicciones$pred
valoresPredichos
plot.ts(serie.sinEst, xlim=c(1500, tiempoTs[length(tiempoTs)]))
lines(tiempoTs,valoresPredichos, col="green")
Box.test(modelo$residuals)
jarque.bera.test(modelo$residuals)
shapiro.test(modelo$residuals)
# coeficiente de autoregresión = 0, diferenciaciones = 0, coeficiente de medias moviles = 0
modelo = arima(serie.sinEst, order = c(1,0,0))
# calculamos las predicciones
predicciones = predict(modelo, n.ahead = Npred)
valoresPredichos = predicciones$pred
valoresPredichos
plot.ts(serie.sinEst, xlim=c(1500, tiempoTs[length(tiempoTs)]))
lines(tiempoTs,valoresPredichos, col="green")
Box.test(modelo$residuals)
hist(modelo$residuals, col="blue", prob=T,ylim=c(0,20), xlim=c(-0.2,0.2))
lines(density(modelo$residuals))
hist(modelo$residuals, col="blue", prob=T,ylim=c(0,10), xlim=c(-0.2,0.2))
lines(density(modelo$residuals))
hist(modelo$residuals, col="blue", prob=T,ylim=c(0,6), xlim=c(-0.2,0.2))
lines(density(modelo$residuals))
hist(modelo$residuals, col="blue", prob=T,ylim=c(0,6), xlim=c(-0.4,0.4))
lines(density(modelo$residuals))
library(tseries)
library(dplyr)
library(lubridate)
library(imputeTS)
datos = read.csv("5530E.csv", header = TRUE, sep=";")
datos = datos[,c("Fecha","Tmax")]
datos$Fecha = as.Date(datos$Fecha)
apply(datos, 2, function(atributo){sum(is.na(atributo))})
datos$Tmax = na.interpolation(datos$Tmax)
Npred = 7 # cantidad de datos a predecir (temperaturas máximas de marzo y abril)
serie = datos$Tmax
serie.ts = ts(serie, frequency = 365) # frequency set to 12 to set stationality each 12 months
plot(decompose(serie.ts))
serie.ts.log = log(serie.ts)
serie.log = log(serie)
plot(decompose(serie.ts.log))
head(decompose(serie.ts.log)$seasonal)
serie = serie.log
# para train
tiempo = 1:length(serie.ts.log)
# para test
tiempoTs = (tiempo[length(tiempo)]+1):(tiempo[length(tiempo)]+Npred)
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
parametros.H1 = lm(serie ~tiempo)
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
# calculo de parámetros
parametros.H1 = lm(serie ~tiempo + I(tiempo^2))
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]  + tiempo*parametros.H1$coefficients[3]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]  + tiempoTs*parametros.H1$coefficients[3]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
# calculo de parametros
parametros.H1 = lm(serie ~ log(tiempo))
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
# representacion de la tendencia sobre la serie
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
# test de normalizacion Jarque Bera
JB = jarque.bera.test(parametros.H1$residuals)
JB
# calculo de parametros
parametros.H1 = lm(serie ~ sin(tiempo))
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
# representacion de la tendencia sobre la serie
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
# test de normalizacion Jarque Bera
JB = jarque.bera.test(parametros.H1$residuals)
JB
serie2=diff(serie, differences = 3)
tiempo2= 1:length(serie2)
# calculo de parametros
parametros.H1 = lm(serie2 ~ tiempo2)
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo2*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
# representacion de la tendencia sobre la serie
plot.ts(serie2, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo2, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
# test de normalizacion Jarque Bera
JB = jarque.bera.test(parametros.H1$residuals)
JB
k = 365 # aquí guardamos los datos estacionales
estacionalidad = decompose(serie.ts.log)$seasonal[1:k]
# elminamos la estacionalidad
serie.sinEst = serie - estacionalidad
plot.ts(serie.sinEst, xlim=c(1, tiempoTs[length(tiempoTs)]))
acf(serie.sinEst)
adf.test(serie.sinEst)
pacf(serie.sinEst)
# coeficiente de autoregresión = 0, diferenciaciones = 0, coeficiente de medias moviles = 0
modelo = arima(serie.sinEst, order = c(0,0,22))
# calculamos las predicciones
predicciones = predict(modelo, n.ahead = Npred)
valoresPredichos = predicciones$pred
valoresPredichos
plot.ts(serie.sinEst, xlim=c(1500, tiempoTs[length(tiempoTs)]))
lines(tiempoTs,valoresPredichos, col="green")
Box.test(modelo$residuals)
jarque.bera.test(modelo$residuals)
shapiro.test(modelo$residuals)
hist(modelo$residuals, col="blue", prob=T,ylim=c(0,6), xlim=c(-0.4,0.4))
lines(density(modelo$residuals))
hist(modelo$residuals, col="blue", prob=T,ylim=c(0,6), xlim=c(-10,0.10))
lines(density(modelo$residuals))
hist(modelo$residuals, col="blue", prob=T,ylim=c(0,6), xlim=c(-10,0,10))
hist(modelo$residuals, col="blue", prob=T,ylim=c(0,6), xlim=c(-5,0,5))
hist(modelo$residuals, col="blue", prob=T,ylim=c(0,6), xlim=c(-0.5,0,0.5))
hist(modelo$residuals, col="blue", prob=T,ylim=c(0,6), xlim=c(-0.4,0.4))
lines(density(modelo$residuals))
hist(modelo$residuals, col="blue", prob=T,ylim=c(0,6), xlim=c(-5,5))
lines(density(modelo$residuals))
hist(modelo$residuals, col="blue", prob=T,ylim=c(0,20), xlim=c(-0.4,0.4))
lines(density(modelo$residuals))
any(density(modelo$residuals)>5)
any(density(modelo$residuals)>I(5))
any(density(modelo$residuals)>5.1
)
library(tseries)
library(dplyr)
library(lubridate)
library(imputeTS)
datos = read.csv("5530E.csv", header = TRUE, sep=";")
datos = datos[,c("Fecha","Tmax")]
datos$Fecha = as.Date(datos$Fecha)
apply(datos, 2, function(atributo){sum(is.na(atributo))})
datos$Tmax = na.interpolation(datos$Tmax)
Npred = 7 # cantidad de datos a predecir (temperaturas máximas de marzo y abril)
serie = datos$Tmax
serie.ts = ts(serie, frequency = 365) # frequency set to 12 to set stationality each 12 months
plot(decompose(serie.ts))
serie.ts.log = log(serie.ts)
serie.log = log(serie)
plot(decompose(serie.ts.log))
head(decompose(serie.ts.log)$seasonal)
serie = serie.log
# para train
tiempo = 1:length(serie.ts.log)
# para test
tiempoTs = (tiempo[length(tiempo)]+1):(tiempo[length(tiempo)]+Npred)
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
parametros.H1 = lm(serie ~tiempo)
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
# calculo de parámetros
parametros.H1 = lm(serie ~tiempo + I(tiempo^2))
parametros.H1
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]  + tiempo*parametros.H1$coefficients[3]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]  + tiempoTs*parametros.H1$coefficients[3]
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
JB = jarque.bera.test(parametros.H1$residuals)
JB
# calculo de parametros
parametros.H1 = lm(serie ~ log(tiempo))
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
# representacion de la tendencia sobre la serie
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
# test de normalizacion Jarque Bera
JB = jarque.bera.test(parametros.H1$residuals)
JB
# calculo de parametros
parametros.H1 = lm(serie ~ sin(tiempo))
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
# representacion de la tendencia sobre la serie
plot.ts(serie, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
# test de normalizacion Jarque Bera
JB = jarque.bera.test(parametros.H1$residuals)
JB
serie2=diff(serie, differences = 3)
tiempo2= 1:length(serie2)
# calculo de parametros
parametros.H1 = lm(serie2 ~ tiempo2)
# tendencia estimada para los datos de train
tendEstimadaTr = parametros.H1$coefficients[1] + tiempo2*parametros.H1$coefficients[2]
# tendencia estimada para las predicciones de test
tendEstimadaTs = parametros.H1$coefficients[1] + tiempoTs*parametros.H1$coefficients[2]
# representacion de la tendencia sobre la serie
plot.ts(serie2, xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempo2, tendEstimadaTr, col = "blue")
lines(tiempoTs, tendEstimadaTs, col = "green")
# test de normalizacion Jarque Bera
JB = jarque.bera.test(parametros.H1$residuals)
JB
k = 365 # aquí guardamos los datos estacionales
estacionalidad = decompose(serie.ts.log)$seasonal[1:k]
# elminamos la estacionalidad
serie.sinEst = serie - estacionalidad
plot.ts(serie.sinEst, xlim=c(1, tiempoTs[length(tiempoTs)]))
acf(serie.sinEst)
adf.test(serie.sinEst)
pacf(serie.sinEst)
# coeficiente de autoregresión = 0, diferenciaciones = 0, coeficiente de medias moviles = 0
modelo = arima(serie.sinEst, order = c(0,0,22))
# calculamos las predicciones
predicciones = predict(modelo, n.ahead = Npred)
valoresPredichos = predicciones$pred
valoresPredichos
plot.ts(serie.sinEst, xlim=c(1500, tiempoTs[length(tiempoTs)]))
lines(tiempoTs,valoresPredichos, col="green")
Box.test(modelo$residuals)
jarque.bera.test(modelo$residuals)
shapiro.test(modelo$residuals)
hist(modelo$residuals, col="blue", prob=T,ylim=c(0,6), xlim=c(-0.4,0.4))
lines(density(modelo$residuals))
estacionalidades = c(estacionalidad[11], estacionalidad[12])
# incluimos la estacionalidad
valoresPredichos.Est = valoresPredichos + estacionalidad[Npred]
# Transformación de los logaritmos
valoresPredichos.Est.Tend.exp = exp(valoresPredichos.Est.Tend)
estacionalidades = c(estacionalidad[11], estacionalidad[12])
# incluimos la estacionalidad
valoresPredichos.Est = valoresPredichos + estacionalidad[Npred]
# Transformación de los logaritmos
valoresPredichos.Est.exp = exp(valoresPredichos.Est)
# usamos exp(serie) por haber hecho al principio serie = log(serie)
plot.ts(exp(serie),xlim=c(1, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, valoresPredichos.Est.exp, col = "green")
estacionalidades = c(estacionalidad[11], estacionalidad[12])
# incluimos la estacionalidad
valoresPredichos.Est = valoresPredichos + estacionalidad[Npred]
# Transformación de los logaritmos
valoresPredichos.Est.exp = exp(valoresPredichos.Est)
# usamos exp(serie) por haber hecho al principio serie = log(serie)
plot.ts(exp(serie),xlim=c(1500, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, valoresPredichos.Est.exp, col = "green")
estacionalidades = c(estacionalidad[11], estacionalidad[12])
# incluimos la estacionalidad
valoresPredichos.Est = valoresPredichos + estacionalidad[297:304]
estacionalidades = c(estacionalidad[11], estacionalidad[12])
# incluimos la estacionalidad
valoresPredichos.Est = valoresPredichos + estacionalidad[297:305]
estacionalidades = c(estacionalidad[11], estacionalidad[12])
# incluimos la estacionalidad
valoresPredichos.Est = valoresPredichos + estacionalidad[297:303]
# Transformación de los logaritmos
valoresPredichos.Est.exp = exp(valoresPredichos.Est)
# usamos exp(serie) por haber hecho al principio serie = log(serie)
plot.ts(exp(serie),xlim=c(1500, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, valoresPredichos.Est.exp, col = "green")
head(datos)
estacionalidades = c(estacionalidad[11], estacionalidad[12])
estacionalidadCorrespondiente = 365-30-31-7+2
# incluimos la estacionalidad
valoresPredichos.Est = valoresPredichos + estacionalidad[297:303]
# Transformación de los logaritmos
valoresPredichos.Est.exp = exp(valoresPredichos.Est)
# usamos exp(serie) por haber hecho al principio serie = log(serie)
plot.ts(exp(serie),xlim=c(1500, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, valoresPredichos.Est.exp, col = "green")
estacionalidades = c(estacionalidad[11], estacionalidad[12])
estacionalidadCorrespondiente = 365-30-31-7
# incluimos la estacionalidad
valoresPredichos.Est = valoresPredichos + estacionalidad[estacionalidadCorrespondiente :
estacionalidadCorrespondiente + 7]
# Transformación de los logaritmos
valoresPredichos.Est.exp = exp(valoresPredichos.Est)
# usamos exp(serie) por haber hecho al principio serie = log(serie)
plot.ts(exp(serie),xlim=c(1500, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, valoresPredichos.Est.exp, col = "green")
estacionalidades = c(estacionalidad[11], estacionalidad[12])
estacionalidadCorrespondiente = 365-30-31-7
# incluimos la estacionalidad
valoresPredichos.Est = valoresPredichos + estacionalidad[estacionalidadCorrespondiente :
estacionalidadCorrespondiente + 6]
# Transformación de los logaritmos
valoresPredichos.Est.exp = exp(valoresPredichos.Est)
# usamos exp(serie) por haber hecho al principio serie = log(serie)
plot.ts(exp(serie),xlim=c(1500, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, valoresPredichos.Est.exp, col = "green")
estacionalidades = c(estacionalidad[11], estacionalidad[12])
estacionalidadCorrespondiente = 365-30-31-7
# incluimos la estacionalidad
valoresPredichos.Est = valoresPredichos + estacionalidad[estacionalidadCorrespondiente :
estacionalidadCorrespondiente(+7)]
estacionalidades = c(estacionalidad[11], estacionalidad[12])
estacionalidadCorrespondiente = 365-30-31-7
# incluimos la estacionalidad
valoresPredichos.Est = valoresPredichos + estacionalidad[estacionalidadCorrespondiente :
estacionalidadCorrespondiente(+6)]
estacionalidades = c(estacionalidad[11], estacionalidad[12])
estacionalidadCorrespondiente = 365-30-31-7
# incluimos la estacionalidad
valoresPredichos.Est = valoresPredichos + estacionalidad[estacionalidadCorrespondiente :
estacionalidadCorrespondiente(+8)]
estacionalidades = c(estacionalidad[11], estacionalidad[12])
estacionalidadCorrespondiente = 365-30-31-7
# incluimos la estacionalidad
valoresPredichos.Est = valoresPredichos + estacionalidad[estacionalidadCorrespondiente : (estacionalidadCorrespondiente+7)]
estacionalidades = c(estacionalidad[11], estacionalidad[12])
estacionalidadCorrespondiente = 365-30-31-7
# incluimos la estacionalidad
valoresPredichos.Est = valoresPredichos + estacionalidad[estacionalidadCorrespondiente : (estacionalidadCorrespondiente+6)]
# Transformación de los logaritmos
valoresPredichos.Est.exp = exp(valoresPredichos.Est)
# usamos exp(serie) por haber hecho al principio serie = log(serie)
plot.ts(exp(serie),xlim=c(1500, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, valoresPredichos.Est.exp, col = "green")
estacionalidades = c(estacionalidad[11], estacionalidad[12])
estacionalidadCorrespondiente = 365-30-31-7
# incluimos la estacionalidad
valoresPredichos.Est =
valoresPredichos + estacionalidad[estacionalidadCorrespondiente : (estacionalidadCorrespondiente+6)]
# Transformación de los logaritmos
valoresPredichos.Est.exp = exp(valoresPredichos.Est)
# usamos exp(serie) por haber hecho al principio serie = log(serie)
plot.ts(exp(serie),xlim=c(1500, tiempoTs[length(tiempoTs)]))
lines(tiempoTs, valoresPredichos.Est.exp, col = "green")
valoresPredichos.Est.exp
